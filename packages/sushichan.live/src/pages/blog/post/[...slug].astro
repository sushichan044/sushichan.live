---
import type { CollectionEntry } from "astro:content";
import type { ReadTimeResults } from "reading-time";

import { render } from "astro:content";

import ContentLayout from "../../../components/common/ContentLayout.astro";
import PageAlertWrapper from "../../../components/ui/PageAlertWrapper.astro";
import SafeHTML from "../../../components/utils/SafeHTML.astro";
import BlogFrontMatter from "../../../features/blog/components/BlogFrontMatter.astro";
import BlogRenderer from "../../../features/blog/components/BlogRenderer.astro";
import BlogStyle from "../../../features/blog/components/BlogStyle.astro";
import { getAllPosts } from "../../../features/blog/utils/post";
import BlogPostSEO from "../../../features/meta/BlogPostSEO.astro";
import BlogLayout from "../../../layouts/BlogLayout.astro";
import { parseMarkdownArray } from "../../../utils/markdown";
import { trimExtension } from "../../../utils/string";
import { getEntry } from "astro:content";

interface Props {
  entry: CollectionEntry<"posts">;
}

const { slug } = Astro.params;

const entry = await getEntry("posts", slug);
if (!entry) {
  return Astro.redirect("/404");
}

// const { entry } = Astro.props;

export const prerender = false;
// export async function getStaticPaths() {
//   const blogEntries = await getAllPosts();
//   return blogEntries.map((entry) => ({
//     params: { slug: trimExtension(entry.id) },
//     props: { entry },
//   }));
// }

const renderResult = await render(entry);

const showAlert = (entry.data.alert && entry.data.alert.length > 0) ?? false;

const readTime = renderResult.remarkPluginFrontmatter["minutesRead"] as
  | ReadTimeResults
  | undefined;
const alerts = entry.data.alert ?? [];
const parsedAlerts = await parseMarkdownArray(alerts);
---

<BlogLayout>
  <BlogPostSEO entry={entry} slot="seo" />
  <ContentLayout asElement="article">
    <BlogFrontMatter entry={entry} readTime={readTime} />
    <PageAlertWrapper backIfNewTab="/blog">
      {
        showAlert && (
          // HACK: https://github.com/withastro/astro/issues/3884

          <ul slot={showAlert && "alert"}>
            {parsedAlerts.map((n) => (
              <li>
                <SafeHTML rawHTML={n} />
              </li>
            ))}
          </ul>
        )
      }
      <BlogStyle colorHeading={["h2", "h3"]}>
        <BlogRenderer tocDepth={2} {...renderResult} />
      </BlogStyle>
    </PageAlertWrapper>
  </ContentLayout>
</BlogLayout>
